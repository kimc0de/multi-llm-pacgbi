workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^(openai|deepseek|claude)\//

stages:
  - retrieve-issue
  - request-code
  - build
  - commit-changes
  - merge-request

.prepare_step:
  before_script:
    - apt-get update -qq
    - apt-get install -y jq

retrieve-issue-job:
  stage: retrieve-issue
  extends:
    - .prepare_step
  script:
    - set -e
    - echo "Getting issue ID..."
    - ISSUE_ID=$(echo "$CI_COMMIT_REF_NAME" | grep -oP '^\D*(\d+)' | grep -oP '\d+')
    - echo "Issue ID is $ISSUE_ID"
    - echo "ISSUE_ID=$ISSUE_ID" >> .pipeline-env
    - url="https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/issues/$ISSUE_ID"
    - echo $url
    - >
      ISSUE=$(curl -s -H "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" $url)
    - |
      if echo "$ISSUE" | jq -e '.message' >/dev/null; then
        echo "Error: Failed to retrieve issue $ISSUE_ID. API response: $ISSUE" >&2;
        exit 1;
      fi
    - echo "ISSUE_LABEL=$(echo "$ISSUE" | jq -r '.labels[0]')" >> .pipeline-env
    - echo "ISSUE_TITLE=$(echo "$ISSUE" | jq -r '.title')" >> .pipeline-env
    - >
      echo "Title: $(echo "$ISSUE" | jq -r '.title')" > issue-description.txt
    - >
      echo "Description: $(echo "$ISSUE" | jq -r '.description')" >> issue-description.txt
    - echo "GitLab issue retrieved and saved to issue-description.txt."
  artifacts:
    paths:
      - issue-description.txt
    reports:
      dotenv: .pipeline-env

request-code-job:
  stage: request-code
  extends:
    - .prepare_step
  script:
    - set -e
    - echo "Requesting code from LLM based on branch name"
    - issue_description=$(<issue-description.txt)
    - component_path=$(find . -type f -name "$ISSUE_LABEL" | head -n 1)
    - |
      if [ -z "$component_path" ]; then
        echo "Error: No file found matching ISSUE_LABEL ($ISSUE_LABEL)" >&2
      exit 1
      fi
    - |
      if [ ! -f "$component_path" ]; then
        echo "Error: $component_path is not a valid file" >&2
        exit 1
      fi
    - echo "component_path=$component_path" >> .pipeline-env
    # Read the file content
    - context_code=$(<"$component_path")
    - package_json_path=$(find -name package.json)
    - package_json=$(<$package_json_path)
    - dependencies=$(echo "$package_json" | jq -r '.dependencies')
    - devDependencies=$(echo "$package_json" | jq -r '.devDependencies')
    - >
      allDependencies=$(jq -n \
        --arg dependencies "$dependencies" \
        --arg devDependencies "$devDependencies" \
      '{
        dependencies: $dependencies,
        devDependencies: $devDependencies
      }')

    - |
      # Determine LLM to use based on branch prefix
      if [[ "$CI_COMMIT_REF_NAME" =~ ^openai/ ]]; then
        API_URL="https://api.openai.com/v1/chat/completions"
        LLM="OPENAI"
        data=$(jq -n \
          --arg model "$OPENAI_MODEL" \
          --arg system_message "$SYSTEM_MESSAGE" \
          --arg issue_description "$issue_description" \
          --arg minified_package "$allDependencies" \
          --arg issue_label "$ISSUE_LABEL" \
          --arg context_code "$context_code" \
          '{
            model: $model,
            messages: [
              {role: "system", content: $system_message},
              {role: "user", content: $issue_description},
              {role: "user", content: ("The dependencies listed in the package.json of this application are: \($minified_package)")},
              {role: "user", content: ("The code of \($issue_label) component is ``` \($context_code)```")}
            ],
            temperature: 0
          }')
        response=$(curl -s -H "Content-Type: application/json" -H "Authorization: Bearer $OPENAI_API_KEY" -d "$data" $API_URL)
        # Extract tokens from OpenAI response
        input_tokens=$(echo "$response" | jq -r '.usage.prompt_tokens')
        output_tokens=$(echo "$response" | jq -r '.usage.completion_tokens')
        total_tokens=$(echo "$response" | jq -r '.usage.total_tokens')
        # Calculate cost
        input_cost=$(awk "BEGIN {printf \"%.6f\", ($input_tokens / 1000000) * 2.50}")
        output_cost=$(awk "BEGIN {printf \"%.6f\", ($output_tokens / 1000000) * 10.00}")
        total_cost=$(awk "BEGIN {printf \"%.6f\", $input_cost + $output_cost}")

      elif [[ "$CI_COMMIT_REF_NAME" =~ ^deepseek/ ]]; then
        API_URL="https://api.deepseek.com/chat/completions"
        LLM="DEEPSEEK"
        data=$(jq -n \
          --arg model "$DEEPSEEK_CODER_MODEL" \
          --arg system_message "$SYSTEM_MESSAGE" \
          --arg issue_description "$issue_description" \
          --arg minified_package "$allDependencies" \
          --arg issue_label "$ISSUE_LABEL" \
          --arg context_code "$context_code" \
          '{
            model: $model,
            messages: [
              {role: "system", content: $system_message},
              {role: "user", content: $issue_description},
              {role: "user", content: ("The dependencies listed in the package.json of this application are: \($minified_package)")},
              {role: "user", content: ("The code of \($issue_label) component is ``` \($context_code)```")}
            ],
            stream: false
          }')
        response=$(curl -s -H "Content-Type: application/json" -H "Authorization: Bearer $DEEPSEEK_CODER_API_KEY" -d "$data" $API_URL)
        # Extract tokens from Deepseek response
        input_tokens=$(echo "$response" | jq -r '.usage.prompt_tokens')
        output_tokens=$(echo "$response" | jq -r '.usage.completion_tokens')
        total_tokens=$(echo "$response" | jq -r '.usage.total_tokens')
        # Calculate cost
        input_cost=$(awk "BEGIN {printf \"%.6f\", ($input_tokens / 1000000) * 0.14}")
        output_cost=$(awk "BEGIN {printf \"%.6f\", ($output_tokens / 1000000) * 0.28}")
        total_cost=$(awk "BEGIN {printf \"%.6f\", $input_cost + $output_cost}")

      elif [[ "$CI_COMMIT_REF_NAME" =~ ^claude/ ]]; then
        API_URL="https://api.anthropic.com/v1/messages"
        LLM="CLAUDE"
        data=$(jq -n \
          --arg model "$CLAUDE_SONNET_MODEL" \
          --arg system_message "$SYSTEM_MESSAGE" \
          --arg issue_description "$issue_description" \
          --arg minified_package "$allDependencies" \
          --arg issue_label "$ISSUE_LABEL" \
          --arg context_code "$context_code" \
          '{
            model: $model,
            max_tokens: 8192,
            temperature: 0,
            messages: [
              {role: "user", content: $issue_description},
              {role: "user", content: ("The dependencies listed in the package.json of this application are: \($minified_package)")},
              {role: "user", content: ("The code of \($issue_label) component is ``` \($context_code)```")}
            ],
            system: $system_message
          }')
        response=$(curl -s -H "Content-Type: application/json" -H "x-api-key: $CLAUDE_SONNET_API_KEY" -H "anthropic-version: 2023-06-01" -d "$data" $API_URL)
        # Extract tokens from Claude response
        input_tokens=$(echo "$response" | jq -r '.usage.input_tokens')
        output_tokens=$(echo "$response" | jq -r '.usage.output_tokens')
        total_tokens=$((input_tokens + output_tokens))
          # Calculate cost
        input_cost=$(awk "BEGIN {printf \"%.6f\", ($input_tokens / 1000000) * 3.00}")
        output_cost=$(awk "BEGIN {printf \"%.6f\", ($output_tokens / 1000000) * 15.00}")
        total_cost=$(awk "BEGIN {printf \"%.6f\", $input_cost + $output_cost}")

      else
        echo "Unsupported branch prefix"
        exit 1
      fi
    - echo "LLM=$LLM" >> .pipeline-env
    - echo "input_tokens=$input_tokens" >> .pipeline-env
    - echo "output_tokens=$output_tokens" >> .pipeline-env
    - echo "total_tokens=$total_tokens" >> .pipeline-env

    - echo "LLM Usage Information:"
    - echo "Input Tokens $input_tokens"
    - echo "Output Tokens $output_tokens"
    - echo "Total Tokens $total_tokens"
    - echo "Total Cost \$$total_cost"
    - |
      # Log the assistant response based on LLM type
      if [ "$LLM" = "OPENAI" ] || [ "$LLM" = "DEEPSEEK" ]; then
        echo "The assistant response is $response"
        echo "$response" | jq -r '.choices[0].message.content' | perl -0777 -ne 'print $1 if /```.*?\s(.*?)\s*```/s' > $component_path
      elif [ "$LLM" = "CLAUDE" ]; then
        echo "The assistant response is $response"
        echo "$response" | jq -r '.content[0].text' | perl -0777 -ne 'print $1 if /```.*?\s(.*?)\s*```/s' > $component_path
      else
        echo "Unsupported LLM type for response parsing."
        exit 1
      fi
    - cat $component_path
  artifacts:
    paths:
      - .
    reports:
      dotenv: .pipeline-env

build-job:
  stage: build
  image: node:18-alpine
  before_script:
    - apk update && apk add git
  script:
    - echo "Compiling the code..."
    - git status
    - yarn install
    - yarn prettier
    - yarn vite build
    - echo "Compiling complete."

commit-changes-job:
  stage: commit-changes
  image: node:18-alpine
  variables:
    author_email: "genai@bot.com"
    author_name: "GenAI Bot"
  before_script:
    - apk update && apk add git
  script:
    - git config user.email $author_email
    - git config user.name $author_name
    - git checkout -b $CI_COMMIT_BRANCH
    - echo "Remove unnecessary files"
    - rm issue-description.txt
    - component_path=$(find . -type f -name "$ISSUE_LABEL" | head -n 1)
    - echo "$component_path"
    - npx prettier --write $component_path;
    - echo "Commit changes..."
    - git status
    - git commit -am "Update $ISSUE_LABEL"
    - git push "https://project_access_token:$GITLAB_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git" -o ci.skip
    - echo "File successfully updated."

merge-request-job:
  stage: merge-request
  extends:
    - .prepare_step
  script:
    - set -e
    - echo "Creating merge request..."
    - url="https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests"
    - git branch
    - git reset --hard
    - git checkout $CI_COMMIT_BRANCH
    - git pull
    - diff_output=$(git diff HEAD~1)

    - |
      # Determine LLM to use for generating the summary based on branch prefix
      if [[ "$CI_COMMIT_REF_NAME" =~ ^openai/ ]]; then
        API_URL="https://api.openai.com/v1/chat/completions"
        data=$(jq -n \
          --arg model "$OPENAI_MODEL" \
          --arg diff "$diff_output" \
          '{
            model: $model,
            messages: [
              {role: "user", content: "Please provide a summary of the following changes:\n\($diff)"}
            ],
            temperature: 0.0
          }')
        response=$(curl -s -H "Content-Type: application/json" -H "Authorization: Bearer $OPENAI_API_KEY" -d "$data" $API_URL)
        changes_summary=$(echo "$response" | jq -r '.choices[0].message.content')
        input_tokens=$(echo "$response" | jq -r '.usage.prompt_tokens')
        output_tokens=$(echo "$response" | jq -r '.usage.completion_tokens')
        total_tokens=$(echo "$response" | jq -r '.usage.total_tokens')
        input_cost=$(awk "BEGIN {printf \"%.6f\", ($input_tokens / 1000000) * 2.50}")
        output_cost=$(awk "BEGIN {printf \"%.6f\", ($output_tokens / 1000000) * 10.00}")
        total_cost=$(awk "BEGIN {printf \"%.6f\", $input_cost + $output_cost}")

      elif [[ "$CI_COMMIT_REF_NAME" =~ ^deepseek/ ]]; then
        API_URL="https://api.deepseek.com/chat/completions"
        data=$(jq -n \
          --arg model "$DEEPSEEK_CODER_MODEL" \
          --arg diff "$diff_output" \
          '{
            model: $model,
            messages: [
              {role: "user", content: "Please provide a summary of the following changes:\n\($diff)"}
            ],
            temperature: 0.0
          }')
        response=$(curl -s -H "Content-Type: application/json" -H "Authorization: Bearer $DEEPSEEK_CODER_API_KEY" -d "$data" $API_URL)
        changes_summary=$(echo "$response" | jq -r '.choices[0].message.content')
        input_tokens=$(echo "$response" | jq -r '.usage.prompt_tokens')
        output_tokens=$(echo "$response" | jq -r '.usage.completion_tokens')
        total_tokens=$(echo "$response" | jq -r '.usage.total_tokens')
        input_cost=$(awk "BEGIN {printf \"%.6f\", ($input_tokens / 1000000) * 0.14}")
        output_cost=$(awk "BEGIN {printf \"%.6f\", ($output_tokens / 1000000) * 0.28}")
        total_cost=$(awk "BEGIN {printf \"%.6f\", $input_cost + $output_cost}")

      elif [[ "$CI_COMMIT_REF_NAME" =~ ^claude/ ]]; then
        API_URL="https://api.anthropic.com/v1/messages"
        data=$(jq -n \
          --arg model "$CLAUDE_SONNET_MODEL" \
          --arg diff "$diff_output" \
          '{
            model: $model,
            messages: [
              {role: "user", content: "Please provide a summary of the following changes:\n\($diff)"}
            ],
            max_tokens: 8192,
            temperature: 0.0
          }')
        response=$(curl -s -H "Content-Type: application/json" -H "x-api-key: $CLAUDE_SONNET_API_KEY" -H "anthropic-version: 2023-06-01" -d "$data" $API_URL)
        changes_summary=$(echo "$response" | jq -r '.content[0].text')
        input_tokens=$(echo "$response" | jq -r '.usage.input_tokens')
        output_tokens=$(echo "$response" | jq -r '.usage.output_tokens')
        total_tokens=$((input_tokens + output_tokens))
        input_cost=$(awk "BEGIN {printf \"%.6f\", ($input_tokens / 1000000) * 3.00}")
        output_cost=$(awk "BEGIN {printf \"%.6f\", ($output_tokens / 1000000) * 15.00}")
        total_cost=$(awk "BEGIN {printf \"%.6f\", $input_cost + $output_cost}")

      else
        echo "Unsupported branch prefix"
        exit 1
      fi
    - echo "LLM Usage Information:"
    - echo "Input Tokens $input_tokens"
    - echo "Output Tokens $output_tokens"
    - echo "Total Tokens $total_tokens"
    - echo "Total Cost \$$total_cost"

    - >
      data=$(jq -n \
        --arg source_branch "$CI_COMMIT_REF_NAME" \
        --arg target_branch "develop" \
        --arg mr_title "$LLM | PACGBI-$ISSUE_ID: $ISSUE_TITLE" \
        --arg mr_description "### Implementation of [Issue-$ISSUE_ID](https://gitlab.com/$CI_PROJECT_PATH/-/issues/$ISSUE_ID)
        $changes_summary" \
        '{
          source_branch: $source_branch,
          target_branch: $target_branch,
          title: $mr_title,
          description: $mr_description
        }')
    - >
      curl -s --request POST --header "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" --header "Content-Type: application/json" -d "$data" $url | tee merge_request_response.json
    - |
      if jq -e '.id' merge_request_response.json > /dev/null; then
        echo "Merge request created."
      else
        echo "Failed to create merge request." >&2
        exit 1
      fi
